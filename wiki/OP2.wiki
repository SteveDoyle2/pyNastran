#summary Usage of the Op2 Reader

= Introduction =

This is how the version 0.2 OP2 reading software works if you're interested.  *Don't try and use the version 0.1 software unless you have a very simple CQUAD4 static model.*

= Features =
 * multiple subcases
 * ability to set list of subcases to extract
 * lots of transient/static results
   * displacements
   * rod stress/strain
   * beam stress/strain
   * plate stress/strain
   * composite plate stress/strain
   * solid stress/strain
   * eigenvectors
   * elment strain energy support (limited)
 * maxShear/vonMises, fiberDistance/plateCurvature support
 * automated printing of tables
 
== Limitations ==
 * limited thermal support (only temperature)
 * no heat flux
 * no applied/spc/mpc forces

= Details =

{{{

from pyNastran.op2.op2 import OP2

# the OP2 is loaded
op2Obj = OP2('fem.op2')  # instantiates the object

# limits reading to subcase 100 & 200; be careful with SOL 200, it may ONLY has 1 subcase, despite analyzing 2 cases
op2.setSubcases([100,200])

# read the OP2
op2Obj.readOP2()

# lets print the results
print op2Obj.printResults() # prints ALL results from ALL tables

# It prints the following formatted results
---ALL RESULTS---
iSubcase = 1
---DISPLACEMENTS---
nodeID   gridType         Dx         Dy         Dz         Rx         Ry         Rz 
1        G         1.523e-02 -1.641e-06 -2.276e-03          0          0          0 
2        G         1.530e-02          0 -2.300e-03          0          0          0 


iSubcase = 200
---DISPLACEMENTS---
nodeID   gridType         Dx         Dy         Dz         Rx         Ry         Rz 
1        G         1.523e-02 -1.641e-06 -2.276e-03          0          0          0 
2        G         1.530e-02          0 -2.300e-03          0          0          0 

iSubcase = 1
---CELASx STRESSES---
EID     eType     stress 
10001  CELAS1          0 
10002  CELAS2          0 

iSubcase = 200
---CELASx STRESSES---
EID     eType     stress 
10001  CELAS1          0 
10002  CELAS2          0 

iSubcase = 1
---CELASx STRAINS---
EID     eType     strains
10001  CELAS1          0 
10002  CELAS2          0 

iSubcase = 200
---CELASx STRAINS---
EID     eType     strains
10001  CELAS1          0 
10002  CELAS2          0 



}}}
==Static Table ==
{{{
iSubcase = 1
---ISOTROPIC PLATE STRESS---
EID     eType   nodeID  iLayer  curvature        oxx        oyy        txy     majorP     minorP   maxShear 
110001 CQUAD4        C       1      -0.05     -17683      -7216      -9280      -1795     -23103      22260 
110001 CQUAD4        C       2       0.05     -17762      -7252      -9275      -1846     -23168      22302 
110002 CQUAD4        C       1      -0.05      -4872        750       -904        891      -5014       5514 
110002 CQUAD4        C       2       0.05      -4852        740       -907        883      -4996       5492 
110003 CQUAD4        C       1      -0.05      -1870       -362       -284       -310      -1922       1787 

# "C" for nodeID means Centroid.
# if nodeID was a number, that would refer to the actual node ID
# iLayer=1,2 for an isotropic material means Z1/Z2 (Top Half/Bottom Half).


# lets print all the plate stress only (static loading only)
# and then print oxx and ovm (x-stress and von mises stress)
# you can use this instead to process the data (e.g. calculate margins)
# generally all tables follow this pattern
for iSubcase,stressCase in op2Obj.plateStress.items():
    print stressCase
    for eid,oxxNodes in sorted(stressCase.oxx.items()):
        eType = stressCase.eType[eid]
        for nid in sorted(oxxNodes):
            for iLayer in range(len(stressCase.oxx[eid][nid])):
                fd    = stressCase.fiberCurvature[eid][nid][iLayer] # fiber/curvature
                oxx   = stressCase.oxx[eid][nid][iLayer]
                oyy   = stressCase.oyy[eid][nid][iLayer]
                txy   = stressCase.txy[eid][nid][iLayer]
                angle = stressCase.angle[eid][nid][iLayer]
                major = stressCase.majorP[eid][nid][iLayer]
                minor = stressCase.minorP[eid][nid][iLayer]
                ovm   = stressCase.ovmShear[eid][nid][iLayer] # VonMises/MaxShear


# To get ONLY plate stress for subcase 1:
stressSubcase1 = op2Obj.plateStress[1]

# to check if the results contains Von Mises Stress or max Shear Stress
# look at the printout or in code...
# NOTE:  this will be consistent across the entire subcase
isVM = stressSubcase1.isVonMises() # returns True/False
isMaxShear = stressSubcase1.isMaxShear() # returns True/False

# to check if the results contains Fiber / Curvature (composites only)
# look at the printout or in code...
isFiber = stressSubcase1.isFiberDistance() # returns True/False
isCurvature = stressSubcase1.isCurvature() # returns True/False

# we know by looking at the printout or by knowing what was run, but we
# can also query the object to find out if is transient stress or not; 
# this works for all result objects
isTransient = stressSubcase1.isTransient # returns True/False

}}}
==Transient Table ==
{{{

# If stress looked like this instead...
---ISOTROPIC PLATE STRESS---
EID     eType   nodeID  iLayer  curvature        oxx        oyy        txy     majorP     minorP   maxShear 
dt = 0.0
11     CQUAD4        C       1     -0.025          0          0          0          0          0          0          0 
11     CQUAD4        C       2      0.025          0          0          0          0          0          0          0 
12     CQUAD4        C       1     -0.025          0          0          0          0          0          0          0 
12     CQUAD4        C       2      0.025          0          0          0          0          0          0          0 
dt = 0.0249999985099
11     CQUAD4        C       1     -0.025          0       7140      22854       -117      22855       7139      20252 
11     CQUAD4        C       2      0.025          0      -7140     -22854        117      -7139     -22855      20252 
12     CQUAD4        C       1     -0.025          0       7140      22854        117      22855       7139      20252 
12     CQUAD4        C       2      0.025          0      -7140     -22854       -117      -7139     -22855      20252 

# I'll use the transient version instead (print still works the same)
# only accessing the data changes
for iSubcase,stressCase in op2Obj.plateStress.items():
    print stressCase
    for dt,oxxs in sorted(stressCase.oxx.items()):
        msg += '%s = %s\n' %(stressCase.dataCode['name'],dt)
        for eid,oxxNodes in sorted(oxxs.items()):
            eType = stressCase.eType[eid]
            for nid in sorted(oxxNodes):
                for iLayer in range(len(self.oxx[dt][eid][nid])):
                    fd    = stressCase.fiberCurvature[dt][eid][nid][iLayer]
                    oxx   = stressCase.oxx[   dt][eid][nid][iLayer]
                    oyy   = stressCase.oyy[   dt][eid][nid][iLayer]
                    txy   = stressCase.txy[   dt][eid][nid][iLayer]
                    angle = stressCase.angle[ dt][eid][nid][iLayer]
                    major = stressCase.majorP[dt][eid][nid][iLayer]
                    minor = stressCase.minorP[dt][eid][nid][iLayer]
                    ovm   = stressCase.ovmShear[dt][eid][nid][iLayer]

# NOTE:  dataCode contains important information about the case that
# was analyzed (e.g. loadSet, method, the name of the "transient"
# variable, etc.)
# valid transient variable names include:  None, freq, dt, loadStep



}}}
== More Result Tables ==
{{{

iSubcase = 1
---COMPOSITE PLATE STRESS---
EID       eType   iLayer        o11        o22        t12        t1z        t2z  oVonMises 
1001    QUAD4LC        1       1729       1273        667          0          0        705 
1211    TRIA3LC       20      -5397      -1694      -1453          0          0       2353 

## for a QUAD4LC, the stress only exists at the center of the element

iSubcase = 1
---COMPOSITE PLATE STAIN---
EID       eType   iLayer        e11        e22        e12        e1z        e2z  eVonMises 
1001    QUAD4LC        1    0.00011   9.19e-05   6.02e-05          0          0   6.28e-05 

iSubcase = 1
---COMPOSITE PLATE STAIN---
EID       eType   iLayer        e11        e22        e12        e1z        e2z  eMaxShear 
1001    QUAD4LC        1    0.00011   9.19e-05   6.02e-05          0          0   6.28e-05 

# note that in the top first composite strain example, eVonMises is
# used, while in the second eMaxShear is used.  isVonMises() will 
# evaluate to False

iSubcase = 1
---BAR STRAIN---
EID       eType         e1         e2         e3         e4      Axial       eMax       eMin 
22052      CBAR   -0.00062    0.00017   0.000534  -0.000583  -0.000525   8.99e-06   -0.00114 
                  -0.00115   0.000809   0.000555   -0.00118              0.000284    -0.0017 
iSubcase = 1
---BAR STRESS---
EID     eType     s1     s2     s3     s4  Axial   sMax   sMin 
22052    CBAR  -6383   1754   5502  -6008  -5409     92 -11793 
              -11870   8336   5718 -12132          2927 -17542 

iSubcase = 1
---APPLIED LOADS---
nodeID   eID        source         Fx         Fy         Fz         Mx         My         Mz 
----------------------------------------------------------------------------------------------------
1        1        HEXA         28.956      5.041   2576.704          0          0          0 
1        6        QUAD4        22.757     -3.334  -1276.954      0.007     -0.074      0.624 
1        10       TRIA3       -37.645     -1.545    -14.417      0.685      0.038     -1.486 
1        11       TRIA3       -14.068     -0.163  -1285.333     -0.692      0.036      0.862 
1        =        *TOTALS*          0          0          0          0          0          0 
----------------------------------------------------------------------------------------------------

iSubcase = 1
---EIGENVECTORS---
-eigenvalues-
0  1.000000
1  3.000000

eigenvalueReal = 1.000000
nodeID   GridType         Tx         Ty         Tz         Rx         Ry         Rz 
100000          G          0          0          0          0          0          0 
100001          G          0          0          0          0          0          0 
101             S  -0.000399          0          0          0          0          0 

eigenvalueReal = 3.000000
nodeID   GridType         Tx         Ty         Tz         Rx         Ry         Rz 
100000          G          0          0          0          0          0          0 
100001          G          0          0          0          0          0          0 
101             S  -0.000399          0          0          0          0          0 

iSubcase = 1
---TEMPERATURE---
GRID     TEMPERATURE
dt = 0
        1        300
        2        300
dt = 30
        1    297.233
        2    295.214

iSubcase = 1
---BEAM STRESSES---
EID     eType    NID    xxb      sMax       sMin MS_tension MS_compression 
1       CBEAM      1 0.00    -249940    -249940          0          0 
1       CBEAM      3 1.00     499251     499251          0          0 


iSubcase = 2
---TRANSIENT DISPLACEMENTS---
lftsfq = 2
nodeID   gridType         Dx         Dy         Dz         Rx         Ry         Rz 
lftsfq = 1.0
1        G                 0          0          0          0          0          0 
2        G                 0          0          0          0          0          0 
3        G                 0          0          0          0          0          0 

iSubcase = 1
---TRANSIENT DISPLACEMENTS---
dt = 2.5
nodeID   gridType         Dx         Dy         Dz         Rx         Ry         Rz 
dt = 0
1        G                 0          0          0          0          0          0 
2        G                 0          0          0          0          0          0 
3        G                 0          0          0          0          0          0 

# NOTE the difference in the variable names (dt vs lftsfq)

}}}